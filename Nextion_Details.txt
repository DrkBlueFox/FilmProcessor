---

✅ Touch-Eingabe verarbeiten

Jetzt kannst du einfach die Komponentennummern deiner Buttons auswerten:

void handleTouch(byte page, byte component) {
  if (page == 0 && component == 1) {
    // Start-Button gedrückt
    logEvent("Start-Button gedrückt");
    startLeaderEinzug();
  }
  else if (page == 0 && component == 2) {
    // Stop-Button gedrückt
    logEvent("Notstopp");
    emergencyStop();
  }
  else if (page == 2 && component == 1) {
    // Wartungseintrag 1 bestätigen
    acknowledgeMaintenance(0);
  }
}


---

✅ Was musst du im Nextion Editor tun?

Für jeden Button:

“Send Component ID” aktivieren (Touch Event)

Optional: „Send Release Event“ oder „Send Press Event“ je nach Bedarf




---

✅ Zusammenfassung

Mit dieser Touchlogik kannst du:

alle Buttonklicks eindeutig erkennen

wartungsfreundlich im Code verarbeiten

das Ganze später als Mappingtabelle oder Switch-Case strukturieren



---

Möchtest du daraus eine touch.h machen, die du einfach einbinden kannst?











Perfekt – dann kümmern wir uns jetzt um die Auswertung von Touch-Eingaben vom Nextion-Display am ESP32.


---

✅ Touch-Auswertung vom Nextion

Nextion sendet bei Touchereignissen einfache Bytefolgen über die serielle Schnittstelle.
Du kannst diese mit Serial2.read() abfangen und auswerten.


---

🧩 Beispielhafte Touch-Nachricht vom Display:

Wenn du bei einem Button "b0" die Option “Send Component ID” aktivierst, sendet das Display:

65 00 01 01 FF FF FF

Byte	Bedeutung

0x65	Touch Event Header
0x00	Page-ID
0x01	Component-ID
0x01	Event Type: 1 = TouchPress
0xFF 0xFF 0xFF	Abschlusskennung



---

✅ Struktur zur Verarbeitung in deinem Code

Wir bauen dir eine Funktion, die Touch-Ereignisse prüft und dann reagiert:

void checkTouchInput() {
  if (NEXTION.available() >= 7) {
    byte buffer[7];
    for (int i = 0; i < 7; i++) {
      buffer[i] = NEXTION.read();
    }

    // Touch Event Header + Terminator prüfen
    if (buffer[0] == 0x65 && buffer[4] == 0xFF && buffer[5] == 0xFF && buffer[6] == 0xFF) {
      byte pageID = buffer[1];
      byte compID = buffer[2];
      byte eventType = buffer[3];

      if (eventType == 0x01) { // TouchPress
        handleTouch(pageID, compID);
      }
    }
  }
}


---

✅ Touch-Eingabe verarbeiten

Jetzt kannst du einfach die Komponentennummern deiner Buttons auswerten:

void handleTouch(byte page, byte component) {
  if (page == 0 && component == 1) {
    // Start-Button gedrückt
    logEvent("Start-Button gedrückt");
    startLeaderEinzug();
  }
  else if (page == 0 && component == 2) {
    // Stop-Button gedrückt
    logEvent("Notstopp");
    emergencyStop();
  }
  else if (page == 2 && component == 1) {
    // Wartungseintrag 1 bestätigen
    acknowledgeMaintenance(0);
  }
}


---

✅ Was musst du im Nextion Editor tun?

Für jeden Button:

“Send Component ID” aktivieren (Touch Event)

Optional: „Send Release Event“ oder „Send Press Event“ je nach Bedarf




---

✅ Zusammenfassung

Mit dieser Touchlogik kannst du:

alle Buttonklicks eindeutig erkennen

wartungsfreundlich im Code verarbeiten

das Ganze später als Mappingtabelle oder Switch-Case strukturieren



---

Möchtest du daraus eine touch.h machen, die du einfach einbinden kannst?

